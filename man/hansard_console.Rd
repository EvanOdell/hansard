% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hansard_console.R
\name{all_answered_questions_console}
\alias{all_answered_questions_console}
\alias{commons_terms_console}
\alias{bills_console}
\alias{commons_answered_questions_console}
\alias{commons_divisions_console}
\alias{commons_oral_question_times_console}
\alias{commons_oral_questions_console}
\alias{constituencies_console}
\alias{early_day_motions_console}
\alias{election_results_console}
\alias{elections_console}
\alias{epetition_console}
\alias{lords_amendments_console}
\alias{lords_attendance_console}
\alias{lords_divisions_console}
\alias{lords_vote_record_console}
\alias{lords_written_questions_console}
\alias{members_console}
\alias{papers_laid_console}
\alias{publication_logs_console}
\alias{research_briefings_console}
\alias{sessions_info_console}
\alias{tv_programmes_console}
\title{hansard_console}
\usage{
all_answered_questions_console(allAnsType = c("all", "askedBy"))

commons_terms_console(termsType = c("all"))

bills_console(billType = c("ammended", "stageTypes", "publications"))

commons_answered_questions_console(comsAnsType = c("all", "date",
  "department", "answeredBy"))

commons_divisions_console(comsDivType = c("all", "date", "aye", "no",
  "voteSummary", "voteFull", "session", "uinSummary", "uinFull"))

commons_oral_question_times_console(cOralTimeType = c("all", "ID", "session"))

commons_oral_questions_console(comsOralType = c("all", "times", "daysTabled",
  "daysAnswered", "askedBy", "session", "department"))

constituencies_console(contType = c("all"))

early_day_motions_console(edmType = c("all", "allSponsors", "primarySponsor",
  "signatures", "ID"))

election_results_console(resultType = c("all", "ID"))

elections_console(electType = c("all", "ID"))

epetition_console(petType = c("all", "byConstituency", "petitionID",
  "response", "idConstituency"))

lords_amendments_console(all = TRUE)

lords_attendance_console(lordsAttendType = c("all", "date"))

lords_divisions_console(lordsDivType = c("all", "date", "notContent",
  "content", "session"))

lords_vote_record_console(lord.id, lordsRecord = c("all", "content",
  "notContent"))

lords_written_questions_console(lordsWritType = c("all", "department",
  "dates"))

members_console(house = c("all", "commons", "lords", "lordsInterests"))

papers_laid_console(paperType = c("all"))

publication_logs_console(all = TRUE)

research_briefings_console(resType = c("all", "topics", "types", "byTopic",
  "subTopic", "topicSubTopic"))

sessions_info_console(sesType = c("all", "days"))

tv_programmes_console(AVtype = c("TV", "clips"))
}
\arguments{
\item{allAnsType}{The type of questions you want, accepts the arguments 'all' and 'askedBy'}

\item{termsType}{The type of data you want, allows the argument 'all'}

\item{billType}{The type of data you want, allows the arguments 'ammended', 'publications' and 'stageTypes'}

\item{comsAnsType}{The type of data you want, allows the arguments 'all', 'date', 'department', 'answeredBy', 'recent'}

\item{comsDivType}{The type of data you want, allows the arguments 'all', 'date', 'aye', 'no', 'voteSummary', 'voteFull', 'uinSummary', 'uinFull' and 'session'. Defaults to 'all'.}

\item{cOralTimeType}{Accepts the arguments 'all' and 'ID'}

\item{comsOralType}{The type of data you want, allows the arguments 'all', 'times', 'daysTabled', 'daysAnswered', 'askedBy' and 'session'}

\item{contType}{The type of data you want, allows the arguments 'all'}

\item{edmType}{The type of data you want, allows the arguments 'all', 'allSponsors', 'primarySponsor', 'signatures' and 'ID'}

\item{resultType}{Accepts the arguments 'all' and 'ID'}

\item{electType}{Allows the arguments 'all' and 'ID'}

\item{petType}{The type of data you want, allows the arguments 'all', 'byConstituency', 'petitionID', 'response', and 'idConstituency'}

\item{all}{Returns a data frame with all available answered questions.}

\item{lordsAttendType}{Accepts arguments 'all' and 'date'.}

\item{lordsDivType}{Accepts arguments 'all', 'date', 'notContent' and 'content'}

\item{lord.id}{The ID number of a member of the House of Lords. To look up the ID number of a member of the House of Lords use the members_search() function.}

\item{lordsRecord}{Accepts the arguments 'all', 'content' and 'notContent'. Defaults to 'all'.}

\item{lordsWritType}{The type of data you want, allows the arguments 'all', 'department' and 'dates'}

\item{house}{The type of data you want, allows the arguments 'all', 'commons', 'lords', 'lordsInterests'}

\item{paperType}{The type of data you want, allows the arguments 'all', 'department' and 'dates'}

\item{resType}{The type of data you want, allows the arguments 'all', 'topics', 'types',
# 'byTopic','subTopic' and 'topicSubTopic'}

\item{sesType}{The type of data being requested, allows the arguments 'all' and 'days'}

\item{AVtype}{The type of data you want, allows the arguments 'TV' and 'clips'}

\item{askedBy}{Requests a member ID, and returns a data frame with all available questions asked by that member.}

\item{all}{Returns a data frame with all definitions in the parliamentary thesaurus}

\item{ammended}{Imports a data frame with all ammended bills}

\item{stageTypes}{Imports a data frame with all bill stage types}

\item{publications}{Imports a data frame with all bill publications}

\item{all}{Returns a data frame with all answered questions in the House of Commons}

\item{date}{Returns a data frame with all answered questions in the House of Commons on the given date}

\item{department}{Returns a data frame with all answered questions in the House of Commons from the given department}

\item{answeredBy}{Returns a data frame with all answered questions in the House of Commons by the given MP}

\item{all}{Returns a data frame with all available divisions.}

\item{date}{Requests a date in yyyy-mm-dd format and returns a data frame with all available divisions on that date.}

\item{aye}{Returns a data frame with all divisions where a given MP voted aye.}

\item{no}{Returns a data frame with all divisions where a given MP voted no.}

\item{voteSummary}{Requests a division ID, and returns a summary of results of that division in a data frame.}

\item{voteFull}{Requests a division ID, and returns a data frame with details on how each individual member voted.}

\item{uinSummary}{Requests a division UIN and returns a data frame with a summary of results of that division.}

\item{uinFull}{Requests a division UIN and returns a data frame with the full results of that division.}

\item{session}{Requests a session in yyyy/yy format (e.g. 2016/17) and returns a data frame with all divisions in that session.}

\item{all}{Returns a data frame with all of the oral question times.}

\item{ID}{Requests a requestion time ID, and returns a data frame of that question time.}

\item{session}{Requests a session in format yyyy/yy (e.g. 2016/17) and returns a data frame of all oral question times from that session}

\item{all}{Imports all available oral questions}

\item{times}{Imports the times of all available oral questions}

\item{daysTabled}{Requests two dates, and returns a data frame with all oral questions asked between those two dates}

\item{daysAnswered}{Requests two dates, and returns a data frame with all oral questions answered between those two dates}

\item{askedBy}{Requests a member ID and returns a data frame with all oral questions asked by that member}

\item{session}{Requests a session ID and returns a data frame with all oral questions asked in that session}

\item{department}{Requests a Requests a department name, and returns all oral questions answered by that department. The query acts as a search, so entering <health> will return all questions answered by the Department of Health}

\item{all}{Returns a data frame of all constituencies. Defaults to TRUE.}

\item{all}{Returns a data frame of all early day motions}

\item{allSponsors}{Requests a member's ID, and returns a data frame of early day motions where the given member is a sponsor}

\item{primarySponsor}{Requests a member's ID, and returns a data frame of early day motions where the given member is the primary sponsor}

\item{signatures}{Returns a data frame of all early day motion signatures.}

\item{ID}{Requests an Early Day Motion ID, and returns a data frame with information on that Motion.}

\item{all}{Returns general and by-election resuls for each consituency from the 2010 general election onwards.}

\item{ID}{Returns general and by-election resuls for each consituency from the 2010 general election onwards.}

\item{all}{Returns a data frame with the date and type of all general and by-elections since 1945.}

\item{ID}{Requests an election ID, and returns a data frame with the date and type of that election.}

\item{all}{Imports all available epetitions}

\item{byConstituency}{Imports all available epetition signatures by constituency}

\item{petitionID}{Requests a petition ID, and then returns information on that petition}

\item{response}{Requests a petition ID, and then returns the governments response to that petition}

\item{idConstituency}{Requests a petition ID, and then returns the signatures per constituency for that petition}

\item{all}{Returns a data frame with all available House of Lords Amendments Defaults to TRUE.}

\item{all}{Returns a data frame with all available House of Lords attendance records.}

\item{date}{Requests a date and returns a data frame with all available House of Lords attendance records for that date.}

\item{all}{Returns a data frame with all available divisions in the House of Lords.}

\item{date}{Requests a date, and then returns a data frame with all divisions on that date.}

\item{notContent}{Requests a member ID, and then returns a data frame with all divisions in which they have voted not content.}

\item{content}{Requests a member ID, and then returns a data frame with all divisions in which they have voted content.}

\item{session}{Requests a session in yyyy/yy format (e.g. 2016/17) and returns a data frame with all House of Lords divisions in that session.}

\item{all}{Returns a data frame with all recorded votes for a given member of the house of lords.}

\item{content}{Returns a data frame with all divisions where a given lord voted aye.}

\item{notContent}{Returns a data frame with all divisions where a given lord voted no.}

\item{all}{Returns a data frame all written questions from the house of lords}

\item{department}{Requests a department, and then returns a data frame with all written questions answered by that department}

\item{dates}{Requests two dates, and returns a data frame with all available written questions from between the two given dates}

\item{all}{Returns a data frame with information on all members of Parliament, including both the House of Lords and the House of Commons. The data frame includes both current and previous members, and the API currently does not have information on when a member first sat in the house, or to distinguish current from former members.}

\item{commons}{Returns a data frame with information on all members of the House of Commons. The data frame includes both current and previous members of the House of Commons, and the API currently does not have information on when a member first sat in the house, or to distinguish current from former members.}

\item{lords}{Returns a data frame with all available members of the House of Lords.}

\item{lordsInterests}{Requests a member ID, and returns a data frame of the registered interests of that member of the House of Lords.}

\item{all}{Returns a data frame with all available papers laid.}

\item{all}{Returns a data frame with all available Publication Logs. Defaults to TRUE.}

\item{all}{Imports a data frame with all available Parliamentary Research Briefings.}

\item{topics}{Imports a data frame with all Parliamentary Research Briefings topics.}

\item{types}{Imports a data frame with all Parliamentary Research Briefings types.}

\item{byTopic}{Requests a topic, and imports a data frame with all available Parliamentary Research Briefings on that topic}

\item{subTopic}{Requests a topic, and imports a data frame with all of the possible sub-topics for that topic.}

\item{topicSubTopic}{Requests a topic and a subtopic, and imports a data frame with all available Parliamentary Research Briefings on that subtopic}

\item{all}{Imports information on all available parliamentary sessions}

\item{days}{Imports information on the days in all available parliamentary sessions}

\item{TV}{Returns a data frame with details on all TV broadcasts produced by the Westminster Parliament.}

\item{clips}{Returns a data frame with details on all video clips produced by the Westminster Parliament.}
}
\description{
Code that powers the `hansard_basic` function

commons_terms_console

Requests data on House of Commons and House of Lords bills

Requests data on House of Commons answered questions

Requests data on House of Commons divisions

Requests data on House of Commons oral question times

Requests data on House of Commons oral questions

Requests data on House of Commons constituencies

Requests data on early day motions

Requests data on general election results

Requests data on elections

Requests data on Epetitions

Requests data on House of Lords Amendments

Requests data on House of Lords attendance. Please note that the attendance data frames are not as tidy as some of the others that are accessible through this API.

Requests data on House of Lords divisions
#' @param type The type of data you want, allows the arguments 'all', 'date', 'notContent', 'content' and 'session'

Accepts an ID number for a member of the House of Lords, and returns a data frame of their votes. Provides similar functionality to the lords_divisions() function, but accepts member IDs as function parameters rather than requesting them from the console.

Requests data on House of Lords written questions

Requests data on All Members of Parliament including the Lords and the Commons

Requests data on Papers Laid

Requests data on Publication Logs

Requests data on  Parliamentary Research Briefings

Requests data on Parliamentary Sessions

Requests data on TV broadcasts
}
\note{
There are problems with the Bills API, as the JSON data available for some queries, including the query to return all bills currently before the house, is inconsistently formatted and cannot be parsed into a data frame.
}
\examples{
\dontrun{
}
all_answered_questions

\dontrun{

x <- all_answered_questions('all')

x <- all_answered_questions('askedBy')
}
\dontrun{
x <- commons_terms_console('all')
head(x)
 }
\dontrun{
x <- bills('all')

x <- bills('ammended')

x <- bills('stageTypes')
}
\dontrun{
x <- commons_answered_questions('all')

x <- commons_answered_questions('date')

x <- commons_answered_questions('department')

x <- commons_answered_questions('answeredBy')
}
\dontrun{
x <- commons_divisions_console('all')

x <- commons_divisions_console('date')

x <- commons_divisions_console('no')

x <- commons_divisions_console('aye')

x <- commons_divisions_console('voteSummary')

x <- commons_divisions_console('voteFull')

x <- commons_divisions_console('session')

x <- commons_divisions_console('uinSummary')

x <- commons_divisions_console('uinFull')
}
\dontrun{
x <- commons_oral_question_times_console('all')

x <- commons_oral_question_times_console('ID')

x <- commons_oral_question_times_console('session')
}
\dontrun{
x <- commons_oral_questions_console('all')

x <- commons_oral_questions_console('times')

x <- commons_oral_questions_console('daysTabled')

x <- commons_oral_questions_console('daysAnswered')

x <- commons_oral_questions_console('askedBy')

x <- commons_oral_questions_console('session')

x <- commons_oral_questions_console('department')

}
\dontrun{
x <- constituencies_console('all')
}

\dontrun{
x <- early_day_motions_console('all')

x <- early_day_motions_console('allSponsors')

x <- early_day_motions_console('all')

x <- early_day_motions_console('primarySponsor')

x <- early_day_motions_console('signatures')

x <- early_day_motions_console('ID')
}
\dontrun{
x <- election_results_console('all')

x <- election_results_console('ID')
}
\dontrun{
x <- elections_console('all')

x <- elections_console('ID')
}
\dontrun{
x <- epetition_console('all')

x <- epetition_console('byConstituency')

x <- epetition_console('petitionID')

# x <- epetition_console('response')

# x <- epetition_console('idConstituency')

}
\dontrun{
x <- lords_amendments_console()
}
\dontrun{
x <- lords_attendance_console('all')

x <- lords_attendance_console('date')
}

\dontrun{
x <- lords_divisions_console('all')

x <- lords_divisions_console('date')

x <- lords_divisions_console('notContent')

x <- lords_divisions_console('content')

x <- lords_divisions_console('session')
}
\dontrun{
x <- lords_vote_record_console(172, 'all')
}

\dontrun{
x <- lords_written_questions_console('all')

# x <- lords_written_questions_console('department')

# x <- lords_written_questions_console('dates')
}
\dontrun{
x <- members_console'all')

x <- members_console'commons')

x <- members_console'lords')

b <- members_console'lordsInterests')
}
\dontrun{
x <- papers_laid_console('all') }

\dontrun{
# x <- publication_logs_console()
}
\dontrun{
x <- research_briefings_console('all')

x <- research_briefings_console('topics')

x <- research_briefings_console('types')

x <- research_briefings_console('byTopic')

x <- research_briefings_console('subTopic')

x <- research_briefings_console('topicSubTopic')
}
\dontrun{

x <- sessions_info_console('all')

x <- sessions_info_console('days')
}
\dontrun{

x <- tv_programmes_console('TV')


x <- tv_programmes_console('clips')
}
}
\keyword{API}
\keyword{All}
\keyword{Amendments}
\keyword{Answered}
\keyword{Attendance}
\keyword{Briefings}
\keyword{Constituencies}
\keyword{Divisions}
\keyword{EDM}
\keyword{Election}
\keyword{Elections}
\keyword{Hansard}
\keyword{House}
\keyword{Laid}
\keyword{Logs}
\keyword{Lords}
\keyword{Members}
\keyword{Oral}
\keyword{Papers}
\keyword{Parliament}
\keyword{Parliamentary}
\keyword{Publication}
\keyword{Questions}
\keyword{Research}
\keyword{Results}
\keyword{Sessions}
\keyword{TV}
\keyword{Time}
\keyword{Written}
\keyword{bills}
\keyword{divisions}
\keyword{ePetitions}
\keyword{internal}
\keyword{of}
\keyword{parliamentary}
\keyword{thesaurus}
